
digraph UmlClassDiagram {
rankdir=BT
arrowhead=open
bgcolor="white"
edge [color="black"]
node [shape=record, style=filled, color="black", fillcolor="gray95", fontcolor="black"]
subgraph  graph_0 {
label="flatten"
0 [label="{\<\<Abstract\>\>\nInitializable\nflatten/RHCertificateToken.sol| Private:\l\ \ \ INITIALIZABLE_STORAGE: bytes32\l| Private:\l\ \ \ \ _getInitializableStorage(): ($: InitializableStorage)\lInternal:\l\ \ \ \ _checkInitializing()\l\ \ \ \ _disableInitializers()\l\ \ \ \ _getInitializedVersion(): uint64\l\ \ \ \ _isInitializing(): bool\lPublic:\l\ \ \ \ \<\<event\>\> Initialized(version: uint64)\l\ \ \ \ \<\<modifier\>\> initializer()\l\ \ \ \ \<\<modifier\>\> reinitializer(version: uint64)\l\ \ \ \ \<\<modifier\>\> onlyInitializing()\l}"]
1 [label="{\<\<Struct\>\>\nInitializableStorage\nflatten/RHCertificateToken.sol| _initialized: uint64\l_initializing: bool\l}"]
2 [label="{\<\<Interface\>\>\nIERC165\nflatten/RHCertificateToken.sol| External:\l\ \ \ \  supportsInterface(interfaceId: bytes4): bool\l}"]
3 [label="{\<\<Abstract\>\>\nERC165Upgradeable\nflatten/RHCertificateToken.sol| Internal:\l\ \ \ \ __ERC165_init() \<\<onlyInitializing\>\>\l\ \ \ \ __ERC165_init_unchained() \<\<onlyInitializing\>\>\lPublic:\l\ \ \ \ supportsInterface(interfaceId: bytes4): bool\l}"]
4 [label="{\<\<Abstract\>\>\nContextUpgradeable\nflatten/RHCertificateToken.sol| Internal:\l\ \ \ \ __Context_init() \<\<onlyInitializing\>\>\l\ \ \ \ __Context_init_unchained() \<\<onlyInitializing\>\>\l\ \ \ \ _msgSender(): address\l\ \ \ \ _msgData(): bytes\l\ \ \ \ _contextSuffixLength(): uint256\l}"]
5 [label="{\<\<Interface\>\>\nIAccessControl\nflatten/RHCertificateToken.sol| External:\l\ \ \ \  hasRole(role: bytes32, account: address): bool\l\ \ \ \  getRoleAdmin(role: bytes32): bytes32\l\ \ \ \  grantRole(role: bytes32, account: address)\l\ \ \ \  revokeRole(role: bytes32, account: address)\l\ \ \ \  renounceRole(role: bytes32, callerConfirmation: address)\lPublic:\l\ \ \ \ \<\<event\>\> RoleAdminChanged(role: bytes32, previousAdminRole: bytes32, newAdminRole: bytes32)\l\ \ \ \ \<\<event\>\> RoleGranted(role: bytes32, account: address, sender: address)\l\ \ \ \ \<\<event\>\> RoleRevoked(role: bytes32, account: address, sender: address)\l}"]
6 [label="{\<\<Interface\>\>\nIERC20\nflatten/RHCertificateToken.sol| External:\l\ \ \ \  totalSupply(): uint256\l\ \ \ \  balanceOf(account: address): uint256\l\ \ \ \  transfer(to: address, value: uint256): bool\l\ \ \ \  allowance(owner: address, spender: address): uint256\l\ \ \ \  approve(spender: address, value: uint256): bool\l\ \ \ \  transferFrom(from: address, to: address, value: uint256): bool\lPublic:\l\ \ \ \ \<\<event\>\> Transfer(from: address, to: address, value: uint256)\l\ \ \ \ \<\<event\>\> Approval(owner: address, spender: address, value: uint256)\l}"]
7 [label="{\<\<Interface\>\>\nIERC1363\nflatten/RHCertificateToken.sol| External:\l\ \ \ \  transferAndCall(to: address, value: uint256): bool\l\ \ \ \  transferAndCall(to: address, value: uint256, data: bytes): bool\l\ \ \ \  transferFromAndCall(from: address, to: address, value: uint256): bool\l\ \ \ \  transferFromAndCall(from: address, to: address, value: uint256, data: bytes): bool\l\ \ \ \  approveAndCall(spender: address, value: uint256): bool\l\ \ \ \  approveAndCall(spender: address, value: uint256, data: bytes): bool\l}"]
8 [label="{\<\<Interface\>\>\nIERC20Errors\nflatten/RHCertificateToken.sol}"]
9 [label="{\<\<Interface\>\>\nIERC721Errors\nflatten/RHCertificateToken.sol}"]
10 [label="{\<\<Interface\>\>\nIERC1155Errors\nflatten/RHCertificateToken.sol}"]
11 [label="{\<\<Interface\>\>\nIERC20Metadata\nflatten/RHCertificateToken.sol| External:\l\ \ \ \  name(): string\l\ \ \ \  symbol(): string\l\ \ \ \  decimals(): uint8\l}"]
12 [label="{\<\<Interface\>\>\nIRHCertificateToken\nflatten/RHCertificateToken.sol| Public:\l\ \ \ \ \<\<event\>\> DocHashAdded(num: uint256, docuri: string, dochash: bytes32)\l\ \ \ \ \<\<event\>\> TokenExpired(expirationBlock: uint256)\l\ \ \ \ \<\<event\>\> Paused(account: address)\l\ \ \ \ \<\<event\>\> Unpaused(account: address)\l\ \ \ \ \<\<event\>\> MintAllowance(status: bool, newStatusBlock: uint256)\l\ \ \ \ \<\<event\>\> CustomMintWithLogs(_account: address, newAmount: uint256, invLogLength: uint256, invLogs: InvestmentLog)\l\ \ \ \ \<\<event\>\> DistributeAmount(investor: address, grossAmount: uint256)\l\ \ \ \ \<\<event\>\> WDAmount(investor: address, grossAmount: uint256)\l}"]
13 [label="{\<\<Struct\>\>\nInvestmentRequest\nflatten/RHCertificateToken.sol| investor: address\lamount: uint256\ltimestamp: uint256\l}"]
14 [label="{\<\<Struct\>\>\nDisinvestmentRequest\nflatten/RHCertificateToken.sol| investor: address\lamount: uint256\ltimestamp: uint256\l}"]
15 [label="{\<\<Struct\>\>\nInvestmentLog\nflatten/RHCertificateToken.sol| investor: address\lproofID: bytes32\ltimestamp: uint256\l}"]
16 [label="{\<\<Struct\>\>\nDoc\nflatten/RHCertificateToken.sol| docURI: string\ldocHash: bytes32\llastModified: uint256\l}"]
17 [label="{\<\<Interface\>\>\nIRHCertificatesFactory\nflatten/RHCertificateToken.sol| Public:\l\ \ \ \ \<\<event\>\> LoanCreated(account: address, loanFactory: address)\l}"]
18 [label="{\<\<Interface\>\>\nIRHErrors\nflatten/RHCertificateToken.sol}"]
19 [label="{\<\<Abstract\>\>\nAccessControlUpgradeable\nflatten/RHCertificateToken.sol| Private:\l\ \ \ AccessControlStorageLocation: bytes32\lPublic:\l\ \ \ DEFAULT_ADMIN_ROLE: bytes32\l| Private:\l\ \ \ \ _getAccessControlStorage(): ($: AccessControlStorage)\lInternal:\l\ \ \ \ __AccessControl_init() \<\<onlyInitializing\>\>\l\ \ \ \ __AccessControl_init_unchained() \<\<onlyInitializing\>\>\l\ \ \ \ _checkRole(role: bytes32)\l\ \ \ \ _checkRole(role: bytes32, account: address)\l\ \ \ \ _setRoleAdmin(role: bytes32, adminRole: bytes32)\l\ \ \ \ _grantRole(role: bytes32, account: address): bool\l\ \ \ \ _revokeRole(role: bytes32, account: address): bool\lPublic:\l\ \ \ \ \<\<modifier\>\> onlyRole(role: bytes32)\l\ \ \ \ supportsInterface(interfaceId: bytes4): bool\l\ \ \ \ hasRole(role: bytes32, account: address): bool\l\ \ \ \ getRoleAdmin(role: bytes32): bytes32\l\ \ \ \ grantRole(role: bytes32, account: address) \<\<onlyRole\>\>\l\ \ \ \ revokeRole(role: bytes32, account: address) \<\<onlyRole\>\>\l\ \ \ \ renounceRole(role: bytes32, callerConfirmation: address)\l}"]
20 [label="{\<\<Struct\>\>\nRoleData\nflatten/RHCertificateToken.sol| hasRole: mapping\(address=\>bool\)\ladminRole: bytes32\l}"]
21 [label="{\<\<Struct\>\>\nAccessControlStorage\nflatten/RHCertificateToken.sol| _roles: mapping\(bytes32=\>RoleData\)\l}"]
22 [label="{\<\<Library\>\>\nSafeERC20\nflatten/RHCertificateToken.sol| Private:\l\ \ \ \ _callOptionalReturn(token: IERC20, data: bytes)\l\ \ \ \ _callOptionalReturnBool(token: IERC20, data: bytes): bool\lInternal:\l\ \ \ \ safeTransfer(token: IERC20, to: address, value: uint256)\l\ \ \ \ safeTransferFrom(token: IERC20, from: address, to: address, value: uint256)\l\ \ \ \ safeIncreaseAllowance(token: IERC20, spender: address, value: uint256)\l\ \ \ \ safeDecreaseAllowance(token: IERC20, spender: address, requestedDecrease: uint256)\l\ \ \ \ forceApprove(token: IERC20, spender: address, value: uint256)\l\ \ \ \ transferAndCallRelaxed(token: IERC1363, to: address, value: uint256, data: bytes)\l\ \ \ \ transferFromAndCallRelaxed(token: IERC1363, from: address, to: address, value: uint256, data: bytes)\l\ \ \ \ approveAndCallRelaxed(token: IERC1363, to: address, value: uint256, data: bytes)\l}"]
23 [label="{\<\<Abstract\>\>\nERC20Upgradeable\nflatten/RHCertificateToken.sol| Private:\l\ \ \ ERC20StorageLocation: bytes32\l| Private:\l\ \ \ \ _getERC20Storage(): ($: ERC20Storage)\lInternal:\l\ \ \ \ __ERC20_init(name_: string, symbol_: string) \<\<onlyInitializing\>\>\l\ \ \ \ __ERC20_init_unchained(name_: string, symbol_: string) \<\<onlyInitializing\>\>\l\ \ \ \ _transfer(from: address, to: address, value: uint256)\l\ \ \ \ _update(from: address, to: address, value: uint256)\l\ \ \ \ _mint(account: address, value: uint256)\l\ \ \ \ _burn(account: address, value: uint256)\l\ \ \ \ _approve(owner: address, spender: address, value: uint256)\l\ \ \ \ _approve(owner: address, spender: address, value: uint256, emitEvent: bool)\l\ \ \ \ _spendAllowance(owner: address, spender: address, value: uint256)\lPublic:\l\ \ \ \ name(): string\l\ \ \ \ symbol(): string\l\ \ \ \ decimals(): uint8\l\ \ \ \ totalSupply(): uint256\l\ \ \ \ balanceOf(account: address): uint256\l\ \ \ \ transfer(to: address, value: uint256): bool\l\ \ \ \ allowance(owner: address, spender: address): uint256\l\ \ \ \ approve(spender: address, value: uint256): bool\l\ \ \ \ transferFrom(from: address, to: address, value: uint256): bool\l}"]
24 [label="{\<\<Struct\>\>\nERC20Storage\nflatten/RHCertificateToken.sol| _balances: mapping\(address=\>uint256\)\l_allowances: mapping\(address=\>mapping\(address=\>uint256\)\)\l_totalSupply: uint256\l_name: string\l_symbol: string\l}"]
25 [label="{\<\<Abstract\>\>\nOwnableUpgradeable\nflatten/RHCertificateToken.sol| Private:\l\ \ \ OwnableStorageLocation: bytes32\l| Private:\l\ \ \ \ _getOwnableStorage(): ($: OwnableStorage)\lInternal:\l\ \ \ \ __Ownable_init(initialOwner: address) \<\<onlyInitializing\>\>\l\ \ \ \ __Ownable_init_unchained(initialOwner: address) \<\<onlyInitializing\>\>\l\ \ \ \ _checkOwner()\l\ \ \ \ _transferOwnership(newOwner: address)\lPublic:\l\ \ \ \ \<\<event\>\> OwnershipTransferred(previousOwner: address, newOwner: address)\l\ \ \ \ \<\<modifier\>\> onlyOwner()\l\ \ \ \ owner(): address\l\ \ \ \ renounceOwnership() \<\<onlyOwner\>\>\l\ \ \ \ transferOwnership(newOwner: address) \<\<onlyOwner\>\>\l}"]
26 [label="{\<\<Struct\>\>\nOwnableStorage\nflatten/RHCertificateToken.sol| _owner: address\l}"]
27 [label="{\<\<Abstract\>\>\nReentrancyGuardUpgradeable\nflatten/RHCertificateToken.sol| Private:\l\ \ \ NOT_ENTERED: uint256\l\ \ \ ENTERED: uint256\l\ \ \ ReentrancyGuardStorageLocation: bytes32\l| Private:\l\ \ \ \ _getReentrancyGuardStorage(): ($: ReentrancyGuardStorage)\l\ \ \ \ _nonReentrantBefore()\l\ \ \ \ _nonReentrantAfter()\lInternal:\l\ \ \ \ __ReentrancyGuard_init() \<\<onlyInitializing\>\>\l\ \ \ \ __ReentrancyGuard_init_unchained() \<\<onlyInitializing\>\>\l\ \ \ \ _reentrancyGuardEntered(): bool\lPublic:\l\ \ \ \ \<\<modifier\>\> nonReentrant()\l}"]
28 [label="{\<\<Struct\>\>\nReentrancyGuardStorage\nflatten/RHCertificateToken.sol| _status: uint256\l}"]
29 [label="{\<\<Abstract\>\>\nRHCertificateTokenStorage\nflatten/RHCertificateToken.sol| Public:\l\ \ \ PRICE_MANAGER_ROLE: bytes32\l\ \ \ CERTIFICATE_ADMIN_ROLE: bytes32\l\ \ \ FIAT_ADMIN_ROLE: bytes32\l\ \ \ TRANSFER_AGENT_ROLE: bytes32\l\ \ \ certificatesFactoryAddress: address\l\ \ \ distributionVault: address\l\ \ \ distributionToken: address\l\ \ \ paymentToken: address\l\ \ \ _decimals: uint8\l\ \ \ riskDegree: uint8\l\ \ \ certificateType: uint8\l\ \ \ maxTotalCap: uint256\l\ \ \ docsCounter: uint256\l\ \ \ valStartDate: uint256\l\ \ \ valEndDate: uint256\l\ \ \ maturityDate: uint256\l\ \ \ maxArrayLength: uint256\l\ \ \ nominalValue: uint256\l\ \ \ tokenBidPrice: uint256\l\ \ \ tokenAskPrice: uint256\l\ \ \ paymentDecimals: uint256\l\ \ \ paused: bool\l\ \ \ mintAllowed: bool\l\ \ \ tokenExpired: bool\l\ \ \ isins: string[]\l\ \ \ strikePrices: uint256[]\l\ \ \ barrierPrices: uint256[]\l\ \ \ couponBarrierPrices: uint256[]\l\ \ \ autoCall: bool\l\ \ \ documents: mapping\(uint256=\>Doc\)\l\ \ \ investmentRequests: mapping\(address=\>InvestmentRequest\)\l\ \ \ disinvestmentRequests: mapping\(address=\>DisinvestmentRequest\)\l\ \ \ investmentLogs: mapping\(address=\>InvestmentLog\)\l\ \ \ transferAddresses: mapping\(address=\>bool\)\l\ \ \ avgBuyPrices: mapping\(address=\>uint256\)\l}"]
30 [label="{RHCertificateToken\nflatten/RHCertificateToken.sol| Internal:\l\ \ \ \ _update(from: address, to: address, value: uint256) \<\<whenNotPaused\>\>\lExternal:\l\ \ \ \ \<\<payable\>\> null()\l\ \ \ \ initialize(_certificatesFactoryAddress: address, _tokenName: string, _tokenSymbol: string, _admin: address, _paymentToken: address, _paymentDecs: uint256, _riskDegree: uint8, _certificateType: uint8) \<\<initializer\>\>\l\ \ \ \ setTokenExpired() \<\<tokenNotExpired, onlyRole\>\>\l\ \ \ \ setMaxArrayLen(_newLen: uint256) \<\<onlyRole\>\>\l\ \ \ \ setMintAllowance(_newVal: bool) \<\<onlyRole\>\>\l\ \ \ \ pause() \<\<whenNotPaused, tokenNotExpired, onlyRole\>\>\l\ \ \ \ unpause() \<\<tokenNotExpired, onlyRole\>\>\l\ \ \ \ setTransferAddress(allowedAddress: address) \<\<onlyRole\>\>\l\ \ \ \ distributeDividends(_investorWallets: address[], totalDiv: uint256, dividendPerToken: bool) \<\<nonReentrant, onlyRole\>\>\l\ \ \ \ finalizeCertificate(_investorWallets: address[], finalPrice: uint256) \<\<onlyRole\>\>\l\ \ \ \ investorWithdraw(_amount: uint256)\l\ \ \ \ managedWithdraw(_investor: address, _amount: uint256)\l\ \ \ \ addNewDocument(uri: string, documentHash: bytes32) \<\<onlyRole\>\>\l\ \ \ \ emergencyTokenTransfer(_token: address, _to: address, _amount: uint256) \<\<nonReentrant, onlyRole\>\>\lPublic:\l\ \ \ \ \<\<modifier\>\> mintAllowance()\l\ \ \ \ \<\<modifier\>\> tokenNotExpired()\l\ \ \ \ \<\<modifier\>\> whenNotPaused()\l\ \ \ \ constructor()\l\ \ \ \ setCertificateParameters(_maxTotalCap: uint256, _nominalValue: uint256, _vault: address, _token: address, _valStartDate: uint256, _valEndDate: uint256, _maturityDate: uint256) \<\<onlyRole\>\>\l\ \ \ \ setCertificateOperativeParameters(_isins: string[], _strikePrices: uint256[], _barrierPrices: uint256[], _couponBarrierPrices: uint256[], _autoCall: bool) \<\<onlyRole\>\>\l\ \ \ \ decimals(): uint8\l\ \ \ \ transfer(_to: address, _value: uint256): bool \<\<whenNotPaused, tokenNotExpired, onlyRole\>\>\l\ \ \ \ transferFrom(_from: address, _to: address, _value: uint256): bool \<\<whenNotPaused, tokenNotExpired, onlyRole\>\>\l\ \ \ \ investorDeposit(_amount: uint256) \<\<nonReentrant, whenNotPaused, tokenNotExpired\>\>\l\ \ \ \ managedMint(_account: address, _amount: uint256, _depositProof: bytes32, _time: uint256) \<\<nonReentrant, whenNotPaused, mintAllowance, tokenNotExpired, onlyRole\>\>\l\ \ \ \ calcAvgPrice(prevInv: uint256, prevToken: uint256, newInv: uint256, newToken: uint256): uint256\l\ \ \ \ setPrice(_newBidPrice: uint256, _newAskPrice: uint256) \<\<onlyRole\>\>\l}"]
31 [label="{\<\<Abstract\>\>\nInitializable\nflatten/RHCertificatesFactory.sol| Private:\l\ \ \ INITIALIZABLE_STORAGE: bytes32\l| Private:\l\ \ \ \ _getInitializableStorage(): ($: InitializableStorage)\lInternal:\l\ \ \ \ _checkInitializing()\l\ \ \ \ _disableInitializers()\l\ \ \ \ _getInitializedVersion(): uint64\l\ \ \ \ _isInitializing(): bool\lPublic:\l\ \ \ \ \<\<event\>\> Initialized(version: uint64)\l\ \ \ \ \<\<modifier\>\> initializer()\l\ \ \ \ \<\<modifier\>\> reinitializer(version: uint64)\l\ \ \ \ \<\<modifier\>\> onlyInitializing()\l}"]
32 [label="{\<\<Struct\>\>\nInitializableStorage\nflatten/RHCertificatesFactory.sol| _initialized: uint64\l_initializing: bool\l}"]
33 [label="{\<\<Interface\>\>\nIERC165\nflatten/RHCertificatesFactory.sol| External:\l\ \ \ \  supportsInterface(interfaceId: bytes4): bool\l}"]
34 [label="{\<\<Abstract\>\>\nERC165Upgradeable\nflatten/RHCertificatesFactory.sol| Internal:\l\ \ \ \ __ERC165_init() \<\<onlyInitializing\>\>\l\ \ \ \ __ERC165_init_unchained() \<\<onlyInitializing\>\>\lPublic:\l\ \ \ \ supportsInterface(interfaceId: bytes4): bool\l}"]
35 [label="{\<\<Abstract\>\>\nContextUpgradeable\nflatten/RHCertificatesFactory.sol| Internal:\l\ \ \ \ __Context_init() \<\<onlyInitializing\>\>\l\ \ \ \ __Context_init_unchained() \<\<onlyInitializing\>\>\l\ \ \ \ _msgSender(): address\l\ \ \ \ _msgData(): bytes\l\ \ \ \ _contextSuffixLength(): uint256\l}"]
36 [label="{\<\<Interface\>\>\nIAccessControl\nflatten/RHCertificatesFactory.sol| External:\l\ \ \ \  hasRole(role: bytes32, account: address): bool\l\ \ \ \  getRoleAdmin(role: bytes32): bytes32\l\ \ \ \  grantRole(role: bytes32, account: address)\l\ \ \ \  revokeRole(role: bytes32, account: address)\l\ \ \ \  renounceRole(role: bytes32, callerConfirmation: address)\lPublic:\l\ \ \ \ \<\<event\>\> RoleAdminChanged(role: bytes32, previousAdminRole: bytes32, newAdminRole: bytes32)\l\ \ \ \ \<\<event\>\> RoleGranted(role: bytes32, account: address, sender: address)\l\ \ \ \ \<\<event\>\> RoleRevoked(role: bytes32, account: address, sender: address)\l}"]
37 [label="{\<\<Interface\>\>\nIERC20\nflatten/RHCertificatesFactory.sol| External:\l\ \ \ \  totalSupply(): uint256\l\ \ \ \  balanceOf(account: address): uint256\l\ \ \ \  transfer(to: address, value: uint256): bool\l\ \ \ \  allowance(owner: address, spender: address): uint256\l\ \ \ \  approve(spender: address, value: uint256): bool\l\ \ \ \  transferFrom(from: address, to: address, value: uint256): bool\lPublic:\l\ \ \ \ \<\<event\>\> Transfer(from: address, to: address, value: uint256)\l\ \ \ \ \<\<event\>\> Approval(owner: address, spender: address, value: uint256)\l}"]
38 [label="{\<\<Interface\>\>\nIERC1363\nflatten/RHCertificatesFactory.sol| External:\l\ \ \ \  transferAndCall(to: address, value: uint256): bool\l\ \ \ \  transferAndCall(to: address, value: uint256, data: bytes): bool\l\ \ \ \  transferFromAndCall(from: address, to: address, value: uint256): bool\l\ \ \ \  transferFromAndCall(from: address, to: address, value: uint256, data: bytes): bool\l\ \ \ \  approveAndCall(spender: address, value: uint256): bool\l\ \ \ \  approveAndCall(spender: address, value: uint256, data: bytes): bool\l}"]
39 [label="{\<\<Interface\>\>\nIERC20Errors\nflatten/RHCertificatesFactory.sol}"]
40 [label="{\<\<Interface\>\>\nIERC721Errors\nflatten/RHCertificatesFactory.sol}"]
41 [label="{\<\<Interface\>\>\nIERC1155Errors\nflatten/RHCertificatesFactory.sol}"]
42 [label="{\<\<Interface\>\>\nIERC20Metadata\nflatten/RHCertificatesFactory.sol| External:\l\ \ \ \  name(): string\l\ \ \ \  symbol(): string\l\ \ \ \  decimals(): uint8\l}"]
43 [label="{\<\<Interface\>\>\nIRHCertificateToken\nflatten/RHCertificatesFactory.sol| Public:\l\ \ \ \ \<\<event\>\> DocHashAdded(num: uint256, docuri: string, dochash: bytes32)\l\ \ \ \ \<\<event\>\> TokenExpired(expirationBlock: uint256)\l\ \ \ \ \<\<event\>\> Paused(account: address)\l\ \ \ \ \<\<event\>\> Unpaused(account: address)\l\ \ \ \ \<\<event\>\> MintAllowance(status: bool, newStatusBlock: uint256)\l\ \ \ \ \<\<event\>\> CustomMintWithLogs(_account: address, newAmount: uint256, invLogLength: uint256, invLogs: InvestmentLog)\l\ \ \ \ \<\<event\>\> DistributeAmount(investor: address, grossAmount: uint256)\l\ \ \ \ \<\<event\>\> WDAmount(investor: address, grossAmount: uint256)\l}"]
44 [label="{\<\<Struct\>\>\nInvestmentRequest\nflatten/RHCertificatesFactory.sol| investor: address\lamount: uint256\ltimestamp: uint256\l}"]
45 [label="{\<\<Struct\>\>\nDisinvestmentRequest\nflatten/RHCertificatesFactory.sol| investor: address\lamount: uint256\ltimestamp: uint256\l}"]
46 [label="{\<\<Struct\>\>\nInvestmentLog\nflatten/RHCertificatesFactory.sol| investor: address\lproofID: bytes32\ltimestamp: uint256\l}"]
47 [label="{\<\<Struct\>\>\nDoc\nflatten/RHCertificatesFactory.sol| docURI: string\ldocHash: bytes32\llastModified: uint256\l}"]
48 [label="{\<\<Interface\>\>\nIRHCertificatesFactory\nflatten/RHCertificatesFactory.sol| Public:\l\ \ \ \ \<\<event\>\> LoanCreated(account: address, loanFactory: address)\l}"]
49 [label="{\<\<Interface\>\>\nIRHErrors\nflatten/RHCertificatesFactory.sol}"]
50 [label="{\<\<Abstract\>\>\nAccessControlUpgradeable\nflatten/RHCertificatesFactory.sol| Private:\l\ \ \ AccessControlStorageLocation: bytes32\lPublic:\l\ \ \ DEFAULT_ADMIN_ROLE: bytes32\l| Private:\l\ \ \ \ _getAccessControlStorage(): ($: AccessControlStorage)\lInternal:\l\ \ \ \ __AccessControl_init() \<\<onlyInitializing\>\>\l\ \ \ \ __AccessControl_init_unchained() \<\<onlyInitializing\>\>\l\ \ \ \ _checkRole(role: bytes32)\l\ \ \ \ _checkRole(role: bytes32, account: address)\l\ \ \ \ _setRoleAdmin(role: bytes32, adminRole: bytes32)\l\ \ \ \ _grantRole(role: bytes32, account: address): bool\l\ \ \ \ _revokeRole(role: bytes32, account: address): bool\lPublic:\l\ \ \ \ \<\<modifier\>\> onlyRole(role: bytes32)\l\ \ \ \ supportsInterface(interfaceId: bytes4): bool\l\ \ \ \ hasRole(role: bytes32, account: address): bool\l\ \ \ \ getRoleAdmin(role: bytes32): bytes32\l\ \ \ \ grantRole(role: bytes32, account: address) \<\<onlyRole\>\>\l\ \ \ \ revokeRole(role: bytes32, account: address) \<\<onlyRole\>\>\l\ \ \ \ renounceRole(role: bytes32, callerConfirmation: address)\l}"]
51 [label="{\<\<Struct\>\>\nRoleData\nflatten/RHCertificatesFactory.sol| hasRole: mapping\(address=\>bool\)\ladminRole: bytes32\l}"]
52 [label="{\<\<Struct\>\>\nAccessControlStorage\nflatten/RHCertificatesFactory.sol| _roles: mapping\(bytes32=\>RoleData\)\l}"]
53 [label="{\<\<Library\>\>\nSafeERC20\nflatten/RHCertificatesFactory.sol| Private:\l\ \ \ \ _callOptionalReturn(token: IERC20, data: bytes)\l\ \ \ \ _callOptionalReturnBool(token: IERC20, data: bytes): bool\lInternal:\l\ \ \ \ safeTransfer(token: IERC20, to: address, value: uint256)\l\ \ \ \ safeTransferFrom(token: IERC20, from: address, to: address, value: uint256)\l\ \ \ \ safeIncreaseAllowance(token: IERC20, spender: address, value: uint256)\l\ \ \ \ safeDecreaseAllowance(token: IERC20, spender: address, requestedDecrease: uint256)\l\ \ \ \ forceApprove(token: IERC20, spender: address, value: uint256)\l\ \ \ \ transferAndCallRelaxed(token: IERC1363, to: address, value: uint256, data: bytes)\l\ \ \ \ transferFromAndCallRelaxed(token: IERC1363, from: address, to: address, value: uint256, data: bytes)\l\ \ \ \ approveAndCallRelaxed(token: IERC1363, to: address, value: uint256, data: bytes)\l}"]
54 [label="{\<\<Abstract\>\>\nERC20Upgradeable\nflatten/RHCertificatesFactory.sol| Private:\l\ \ \ ERC20StorageLocation: bytes32\l| Private:\l\ \ \ \ _getERC20Storage(): ($: ERC20Storage)\lInternal:\l\ \ \ \ __ERC20_init(name_: string, symbol_: string) \<\<onlyInitializing\>\>\l\ \ \ \ __ERC20_init_unchained(name_: string, symbol_: string) \<\<onlyInitializing\>\>\l\ \ \ \ _transfer(from: address, to: address, value: uint256)\l\ \ \ \ _update(from: address, to: address, value: uint256)\l\ \ \ \ _mint(account: address, value: uint256)\l\ \ \ \ _burn(account: address, value: uint256)\l\ \ \ \ _approve(owner: address, spender: address, value: uint256)\l\ \ \ \ _approve(owner: address, spender: address, value: uint256, emitEvent: bool)\l\ \ \ \ _spendAllowance(owner: address, spender: address, value: uint256)\lPublic:\l\ \ \ \ name(): string\l\ \ \ \ symbol(): string\l\ \ \ \ decimals(): uint8\l\ \ \ \ totalSupply(): uint256\l\ \ \ \ balanceOf(account: address): uint256\l\ \ \ \ transfer(to: address, value: uint256): bool\l\ \ \ \ allowance(owner: address, spender: address): uint256\l\ \ \ \ approve(spender: address, value: uint256): bool\l\ \ \ \ transferFrom(from: address, to: address, value: uint256): bool\l}"]
55 [label="{\<\<Struct\>\>\nERC20Storage\nflatten/RHCertificatesFactory.sol| _balances: mapping\(address=\>uint256\)\l_allowances: mapping\(address=\>mapping\(address=\>uint256\)\)\l_totalSupply: uint256\l_name: string\l_symbol: string\l}"]
56 [label="{\<\<Abstract\>\>\nOwnableUpgradeable\nflatten/RHCertificatesFactory.sol| Private:\l\ \ \ OwnableStorageLocation: bytes32\l| Private:\l\ \ \ \ _getOwnableStorage(): ($: OwnableStorage)\lInternal:\l\ \ \ \ __Ownable_init(initialOwner: address) \<\<onlyInitializing\>\>\l\ \ \ \ __Ownable_init_unchained(initialOwner: address) \<\<onlyInitializing\>\>\l\ \ \ \ _checkOwner()\l\ \ \ \ _transferOwnership(newOwner: address)\lPublic:\l\ \ \ \ \<\<event\>\> OwnershipTransferred(previousOwner: address, newOwner: address)\l\ \ \ \ \<\<modifier\>\> onlyOwner()\l\ \ \ \ owner(): address\l\ \ \ \ renounceOwnership() \<\<onlyOwner\>\>\l\ \ \ \ transferOwnership(newOwner: address) \<\<onlyOwner\>\>\l}"]
57 [label="{\<\<Struct\>\>\nOwnableStorage\nflatten/RHCertificatesFactory.sol| _owner: address\l}"]
58 [label="{\<\<Abstract\>\>\nReentrancyGuardUpgradeable\nflatten/RHCertificatesFactory.sol| Private:\l\ \ \ NOT_ENTERED: uint256\l\ \ \ ENTERED: uint256\l\ \ \ ReentrancyGuardStorageLocation: bytes32\l| Private:\l\ \ \ \ _getReentrancyGuardStorage(): ($: ReentrancyGuardStorage)\l\ \ \ \ _nonReentrantBefore()\l\ \ \ \ _nonReentrantAfter()\lInternal:\l\ \ \ \ __ReentrancyGuard_init() \<\<onlyInitializing\>\>\l\ \ \ \ __ReentrancyGuard_init_unchained() \<\<onlyInitializing\>\>\l\ \ \ \ _reentrancyGuardEntered(): bool\lPublic:\l\ \ \ \ \<\<modifier\>\> nonReentrant()\l}"]
59 [label="{\<\<Struct\>\>\nReentrancyGuardStorage\nflatten/RHCertificatesFactory.sol| _status: uint256\l}"]
60 [label="{\<\<Library\>\>\nErrors\nflatten/RHCertificatesFactory.sol}"]
61 [label="{\<\<Library\>\>\nStorageSlot\nflatten/RHCertificatesFactory.sol| Internal:\l\ \ \ \ getAddressSlot(slot: bytes32): (r: AddressSlot)\l\ \ \ \ getBooleanSlot(slot: bytes32): (r: BooleanSlot)\l\ \ \ \ getBytes32Slot(slot: bytes32): (r: Bytes32Slot)\l\ \ \ \ getUint256Slot(slot: bytes32): (r: Uint256Slot)\l\ \ \ \ getInt256Slot(slot: bytes32): (r: Int256Slot)\l\ \ \ \ getStringSlot(slot: bytes32): (r: StringSlot)\l\ \ \ \ getStringSlot(store: string): (r: StringSlot)\l\ \ \ \ getBytesSlot(slot: bytes32): (r: BytesSlot)\l\ \ \ \ getBytesSlot(store: bytes): (r: BytesSlot)\l}"]
62 [label="{\<\<Struct\>\>\nAddressSlot\nflatten/RHCertificatesFactory.sol| value: address\l}"]
63 [label="{\<\<Struct\>\>\nBooleanSlot\nflatten/RHCertificatesFactory.sol| value: bool\l}"]
64 [label="{\<\<Struct\>\>\nBytes32Slot\nflatten/RHCertificatesFactory.sol| value: bytes32\l}"]
65 [label="{\<\<Struct\>\>\nUint256Slot\nflatten/RHCertificatesFactory.sol| value: uint256\l}"]
66 [label="{\<\<Struct\>\>\nInt256Slot\nflatten/RHCertificatesFactory.sol| value: int256\l}"]
67 [label="{\<\<Struct\>\>\nStringSlot\nflatten/RHCertificatesFactory.sol| value: string\l}"]
68 [label="{\<\<Struct\>\>\nBytesSlot\nflatten/RHCertificatesFactory.sol| value: bytes\l}"]
69 [label="{\<\<Library\>\>\nAddress\nflatten/RHCertificatesFactory.sol| Private:\l\ \ \ \ _revert(returndata: bytes)\lInternal:\l\ \ \ \ sendValue(recipient: address, amount: uint256)\l\ \ \ \ functionCall(target: address, data: bytes): bytes\l\ \ \ \ functionCallWithValue(target: address, data: bytes, value: uint256): bytes\l\ \ \ \ functionStaticCall(target: address, data: bytes): bytes\l\ \ \ \ functionDelegateCall(target: address, data: bytes): bytes\l\ \ \ \ verifyCallResultFromTarget(target: address, success: bool, returndata: bytes): bytes\l\ \ \ \ verifyCallResult(success: bool, returndata: bytes): bytes\l}"]
70 [label="{\<\<Interface\>\>\nIERC1967\nflatten/RHCertificatesFactory.sol| Public:\l\ \ \ \ \<\<event\>\> Upgraded(implementation: address)\l\ \ \ \ \<\<event\>\> AdminChanged(previousAdmin: address, newAdmin: address)\l\ \ \ \ \<\<event\>\> BeaconUpgraded(beacon: address)\l}"]
71 [label="{\<\<Interface\>\>\nIBeacon\nflatten/RHCertificatesFactory.sol| External:\l\ \ \ \  implementation(): address\l}"]
72 [label="{\<\<Library\>\>\nERC1967Utils\nflatten/RHCertificatesFactory.sol| Internal:\l\ \ \ IMPLEMENTATION_SLOT: bytes32\l\ \ \ ADMIN_SLOT: bytes32\l\ \ \ BEACON_SLOT: bytes32\l| Private:\l\ \ \ \ _setImplementation(newImplementation: address)\l\ \ \ \ _setAdmin(newAdmin: address)\l\ \ \ \ _setBeacon(newBeacon: address)\l\ \ \ \ _checkNonPayable()\lInternal:\l\ \ \ \ getImplementation(): address\l\ \ \ \ upgradeToAndCall(newImplementation: address, data: bytes)\l\ \ \ \ getAdmin(): address\l\ \ \ \ changeAdmin(newAdmin: address)\l\ \ \ \ getBeacon(): address\l\ \ \ \ upgradeBeaconToAndCall(newBeacon: address, data: bytes)\l}"]
73 [label="{\<\<Interface\>\>\nIERC1822Proxiable\nflatten/RHCertificatesFactory.sol| External:\l\ \ \ \  proxiableUUID(): bytes32\l}"]
74 [label="{\<\<Abstract\>\>\nContext\nflatten/RHCertificatesFactory.sol| Internal:\l\ \ \ \ _msgSender(): address\l\ \ \ \ _msgData(): bytes\l\ \ \ \ _contextSuffixLength(): uint256\l}"]
75 [label="{\<\<Abstract\>\>\nOwnable\nflatten/RHCertificatesFactory.sol| Private:\l\ \ \ _owner: address\l| Internal:\l\ \ \ \ _checkOwner()\l\ \ \ \ _transferOwnership(newOwner: address)\lPublic:\l\ \ \ \ \<\<event\>\> OwnershipTransferred(previousOwner: address, newOwner: address)\l\ \ \ \ \<\<modifier\>\> onlyOwner()\l\ \ \ \ constructor(initialOwner: address)\l\ \ \ \ owner(): address\l\ \ \ \ renounceOwnership() \<\<onlyOwner\>\>\l\ \ \ \ transferOwnership(newOwner: address) \<\<onlyOwner\>\>\l}"]
76 [label="{\<\<Abstract\>\>\nProxy\nflatten/RHCertificatesFactory.sol| Internal:\l\ \ \ \ \<\<abstract\>\> _implementation(): address\l\ \ \ \ _delegate(implementation: address)\l\ \ \ \ _fallback()\lExternal:\l\ \ \ \ \<\<payable\>\> null()\l}"]
77 [label="{\<\<Abstract\>\>\nRHCertificateTokenStorage\nflatten/RHCertificatesFactory.sol| Public:\l\ \ \ PRICE_MANAGER_ROLE: bytes32\l\ \ \ CERTIFICATE_ADMIN_ROLE: bytes32\l\ \ \ FIAT_ADMIN_ROLE: bytes32\l\ \ \ TRANSFER_AGENT_ROLE: bytes32\l\ \ \ certificatesFactoryAddress: address\l\ \ \ distributionVault: address\l\ \ \ distributionToken: address\l\ \ \ paymentToken: address\l\ \ \ _decimals: uint8\l\ \ \ riskDegree: uint8\l\ \ \ certificateType: uint8\l\ \ \ maxTotalCap: uint256\l\ \ \ docsCounter: uint256\l\ \ \ valStartDate: uint256\l\ \ \ valEndDate: uint256\l\ \ \ maturityDate: uint256\l\ \ \ maxArrayLength: uint256\l\ \ \ nominalValue: uint256\l\ \ \ tokenBidPrice: uint256\l\ \ \ tokenAskPrice: uint256\l\ \ \ paymentDecimals: uint256\l\ \ \ paused: bool\l\ \ \ mintAllowed: bool\l\ \ \ tokenExpired: bool\l\ \ \ isins: string[]\l\ \ \ strikePrices: uint256[]\l\ \ \ barrierPrices: uint256[]\l\ \ \ couponBarrierPrices: uint256[]\l\ \ \ autoCall: bool\l\ \ \ documents: mapping\(uint256=\>Doc\)\l\ \ \ investmentRequests: mapping\(address=\>InvestmentRequest\)\l\ \ \ disinvestmentRequests: mapping\(address=\>DisinvestmentRequest\)\l\ \ \ investmentLogs: mapping\(address=\>InvestmentLog\)\l\ \ \ transferAddresses: mapping\(address=\>bool\)\l\ \ \ avgBuyPrices: mapping\(address=\>uint256\)\l}"]
78 [label="{RHCertificateToken\nflatten/RHCertificatesFactory.sol| Internal:\l\ \ \ \ _update(from: address, to: address, value: uint256) \<\<whenNotPaused\>\>\lExternal:\l\ \ \ \ \<\<payable\>\> null()\l\ \ \ \ initialize(_certificatesFactoryAddress: address, _tokenName: string, _tokenSymbol: string, _admin: address, _paymentToken: address, _paymentDecs: uint256, _riskDegree: uint8, _certificateType: uint8) \<\<initializer\>\>\l\ \ \ \ setTokenExpired() \<\<tokenNotExpired, onlyRole\>\>\l\ \ \ \ setMaxArrayLen(_newLen: uint256) \<\<onlyRole\>\>\l\ \ \ \ setMintAllowance(_newVal: bool) \<\<onlyRole\>\>\l\ \ \ \ pause() \<\<whenNotPaused, tokenNotExpired, onlyRole\>\>\l\ \ \ \ unpause() \<\<tokenNotExpired, onlyRole\>\>\l\ \ \ \ setTransferAddress(allowedAddress: address) \<\<onlyRole\>\>\l\ \ \ \ distributeDividends(_investorWallets: address[], totalDiv: uint256, dividendPerToken: bool) \<\<nonReentrant, onlyRole\>\>\l\ \ \ \ finalizeCertificate(_investorWallets: address[], finalPrice: uint256) \<\<onlyRole\>\>\l\ \ \ \ investorWithdraw(_amount: uint256)\l\ \ \ \ managedWithdraw(_investor: address, _amount: uint256)\l\ \ \ \ addNewDocument(uri: string, documentHash: bytes32) \<\<onlyRole\>\>\l\ \ \ \ emergencyTokenTransfer(_token: address, _to: address, _amount: uint256) \<\<nonReentrant, onlyRole\>\>\lPublic:\l\ \ \ \ \<\<modifier\>\> mintAllowance()\l\ \ \ \ \<\<modifier\>\> tokenNotExpired()\l\ \ \ \ \<\<modifier\>\> whenNotPaused()\l\ \ \ \ constructor()\l\ \ \ \ setCertificateParameters(_maxTotalCap: uint256, _nominalValue: uint256, _vault: address, _token: address, _valStartDate: uint256, _valEndDate: uint256, _maturityDate: uint256) \<\<onlyRole\>\>\l\ \ \ \ setCertificateOperativeParameters(_isins: string[], _strikePrices: uint256[], _barrierPrices: uint256[], _couponBarrierPrices: uint256[], _autoCall: bool) \<\<onlyRole\>\>\l\ \ \ \ decimals(): uint8\l\ \ \ \ transfer(_to: address, _value: uint256): bool \<\<whenNotPaused, tokenNotExpired, onlyRole\>\>\l\ \ \ \ transferFrom(_from: address, _to: address, _value: uint256): bool \<\<whenNotPaused, tokenNotExpired, onlyRole\>\>\l\ \ \ \ investorDeposit(_amount: uint256) \<\<nonReentrant, whenNotPaused, tokenNotExpired\>\>\l\ \ \ \ managedMint(_account: address, _amount: uint256, _depositProof: bytes32, _time: uint256) \<\<nonReentrant, whenNotPaused, mintAllowance, tokenNotExpired, onlyRole\>\>\l\ \ \ \ calcAvgPrice(prevInv: uint256, prevToken: uint256, newInv: uint256, newToken: uint256): uint256\l\ \ \ \ setPrice(_newBidPrice: uint256, _newAskPrice: uint256) \<\<onlyRole\>\>\l}"]
79 [label="{\<\<Abstract\>\>\nUUPSUpgradeable\nflatten/RHCertificatesFactory.sol| Private:\l\ \ \ __self: address\lPublic:\l\ \ \ UPGRADE_INTERFACE_VERSION: string\l| Private:\l\ \ \ \ _upgradeToAndCallUUPS(newImplementation: address, data: bytes)\lInternal:\l\ \ \ \ \<\<abstract\>\> _authorizeUpgrade(newImplementation: address)\l\ \ \ \ __UUPSUpgradeable_init() \<\<onlyInitializing\>\>\l\ \ \ \ __UUPSUpgradeable_init_unchained() \<\<onlyInitializing\>\>\l\ \ \ \ _checkProxy()\l\ \ \ \ _checkNotDelegated()\lExternal:\l\ \ \ \ proxiableUUID(): bytes32 \<\<notDelegated\>\>\lPublic:\l\ \ \ \ \<\<payable\>\> upgradeToAndCall(newImplementation: address, data: bytes) \<\<onlyProxy\>\>\l\ \ \ \ \<\<modifier\>\> onlyProxy()\l\ \ \ \ \<\<modifier\>\> notDelegated()\l}"]
80 [label="{UpgradeableBeacon\nflatten/RHCertificatesFactory.sol| Private:\l\ \ \ _implementation: address\l| Private:\l\ \ \ \ _setImplementation(newImplementation: address)\lPublic:\l\ \ \ \ \<\<event\>\> Upgraded(implementation: address)\l\ \ \ \ constructor(implementation_: address, initialOwner: address)\l\ \ \ \ implementation(): address\l\ \ \ \ upgradeTo(newImplementation: address) \<\<onlyOwner\>\>\l}"]
81 [label="{BeaconProxy\nflatten/RHCertificatesFactory.sol| Private:\l\ \ \ _beacon: address\l| Internal:\l\ \ \ \ _implementation(): address\l\ \ \ \ _getBeacon(): address\lPublic:\l\ \ \ \ constructor(beacon: address, data: bytes)\l}"]
82 [label="{\<\<Abstract\>\>\nRHCertificatesFactoryStorage\nflatten/RHCertificatesFactory.sol| Public:\l\ \ \ FACTORY_ADMIN_ROLE: bytes32\l\ \ \ certificatesCounter: uint256\l\ \ \ loansLogic: address\l\ \ \ isCertificateDeployed: mapping\(address=\>bool\)\l\ \ \ deployedCertificates: address[]\l}"]
83 [label="{RHCertificatesFactory\nflatten/RHCertificatesFactory.sol| Public:\l\ \ \ loansBeacon: UpgradeableBeacon\l| Internal:\l\ \ \ \ _authorizeUpgrade(address) \<\<onlyOwner\>\>\lExternal:\l\ \ \ \ \<\<payable\>\> null()\l\ \ \ \ initialize(_vLogic: address, _admin: address) \<\<initializer, onlyProxy\>\>\l\ \ \ \ update(_vLogic: address) \<\<onlyOwner\>\>\l\ \ \ \ createCertificate(_tokenName: string, _tokenSymbol: string, _admin: address, _paymentToken: address, _decs: uint8, _riskDegree: uint8, _certificateType: uint8): address \<\<onlyRole\>\>\l\ \ \ \ emergencyTokenTransfer(_token: address, _to: address, _amount: uint256) \<\<onlyRole\>\>\l}"]
}
1 -> 0 [arrowhead=diamond, weight=2]
0 -> 1 [style=dashed, ]
3 -> 0 [arrowhead=empty, arrowsize=3, weight=3, ]
3 -> 2 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
4 -> 0 [arrowhead=empty, arrowsize=3, weight=3, ]
7 -> 6 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
7 -> 2 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
11 -> 6 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
13 -> 12 [arrowhead=diamond, weight=2]
14 -> 12 [arrowhead=diamond, weight=2]
15 -> 12 [arrowhead=diamond, weight=2]
16 -> 12 [arrowhead=diamond, weight=2]
12 -> 15 [style=dashed, ]
20 -> 19 [arrowhead=diamond, weight=2]
21 -> 19 [arrowhead=diamond, weight=2]
19 -> 0 [arrowhead=empty, arrowsize=3, weight=3, ]
19 -> 4 [arrowhead=empty, arrowsize=3, weight=3, ]
19 -> 5 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
19 -> 3 [arrowhead=empty, arrowsize=3, weight=3, ]
19 -> 21 [style=dashed, ]
21 -> 20 [style=dashed, ]
22 -> 6 [style=dashed, ]
22 -> 7 [style=dashed, ]
24 -> 23 [arrowhead=diamond, weight=2]
23 -> 0 [arrowhead=empty, arrowsize=3, weight=3, ]
23 -> 4 [arrowhead=empty, arrowsize=3, weight=3, ]
23 -> 6 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
23 -> 11 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
23 -> 8 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
23 -> 24 [style=dashed, ]
26 -> 25 [arrowhead=diamond, weight=2]
25 -> 0 [arrowhead=empty, arrowsize=3, weight=3, ]
25 -> 4 [arrowhead=empty, arrowsize=3, weight=3, ]
25 -> 26 [style=dashed, ]
28 -> 27 [arrowhead=diamond, weight=2]
27 -> 0 [arrowhead=empty, arrowsize=3, weight=3, ]
27 -> 28 [style=dashed, ]
29 -> 12 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
29 -> 16 []
29 -> 13 []
29 -> 14 []
29 -> 15 []
30 -> 0 [arrowhead=empty, arrowsize=3, weight=3, ]
30 -> 23 [arrowhead=empty, arrowsize=3, weight=3, ]
30 -> 19 [arrowhead=empty, arrowsize=3, weight=3, ]
30 -> 25 [arrowhead=empty, arrowsize=3, weight=3, ]
30 -> 29 [arrowhead=empty, arrowsize=3, weight=3, ]
30 -> 18 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
30 -> 27 [arrowhead=empty, arrowsize=3, weight=3, ]
30 -> 22 [style=dashed, ]
30 -> 6 [style=dashed, ]
30 -> 15 [style=dashed, ]
30 -> 16 [style=dashed, ]
32 -> 31 [arrowhead=diamond, weight=2]
31 -> 32 [style=dashed, ]
34 -> 31 [arrowhead=empty, arrowsize=3, weight=3, ]
34 -> 33 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
35 -> 31 [arrowhead=empty, arrowsize=3, weight=3, ]
38 -> 37 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
38 -> 33 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
42 -> 37 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
44 -> 43 [arrowhead=diamond, weight=2]
45 -> 43 [arrowhead=diamond, weight=2]
46 -> 43 [arrowhead=diamond, weight=2]
47 -> 43 [arrowhead=diamond, weight=2]
43 -> 46 [style=dashed, ]
51 -> 50 [arrowhead=diamond, weight=2]
52 -> 50 [arrowhead=diamond, weight=2]
50 -> 31 [arrowhead=empty, arrowsize=3, weight=3, ]
50 -> 35 [arrowhead=empty, arrowsize=3, weight=3, ]
50 -> 36 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
50 -> 34 [arrowhead=empty, arrowsize=3, weight=3, ]
50 -> 52 [style=dashed, ]
52 -> 51 [style=dashed, ]
53 -> 37 [style=dashed, ]
53 -> 38 [style=dashed, ]
55 -> 54 [arrowhead=diamond, weight=2]
54 -> 31 [arrowhead=empty, arrowsize=3, weight=3, ]
54 -> 35 [arrowhead=empty, arrowsize=3, weight=3, ]
54 -> 37 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
54 -> 42 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
54 -> 39 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
54 -> 55 [style=dashed, ]
57 -> 56 [arrowhead=diamond, weight=2]
56 -> 31 [arrowhead=empty, arrowsize=3, weight=3, ]
56 -> 35 [arrowhead=empty, arrowsize=3, weight=3, ]
56 -> 57 [style=dashed, ]
59 -> 58 [arrowhead=diamond, weight=2]
58 -> 31 [arrowhead=empty, arrowsize=3, weight=3, ]
58 -> 59 [style=dashed, ]
62 -> 61 [arrowhead=diamond, weight=2]
63 -> 61 [arrowhead=diamond, weight=2]
64 -> 61 [arrowhead=diamond, weight=2]
65 -> 61 [arrowhead=diamond, weight=2]
66 -> 61 [arrowhead=diamond, weight=2]
67 -> 61 [arrowhead=diamond, weight=2]
68 -> 61 [arrowhead=diamond, weight=2]
61 -> 62 [style=dashed, ]
61 -> 63 [style=dashed, ]
61 -> 64 [style=dashed, ]
61 -> 65 [style=dashed, ]
61 -> 66 [style=dashed, ]
61 -> 67 [style=dashed, ]
61 -> 68 [style=dashed, ]
72 -> 61 [style=dashed, ]
72 -> 70 [style=dashed, ]
72 -> 69 [style=dashed, ]
72 -> 71 [style=dashed, ]
75 -> 74 [arrowhead=empty, arrowsize=3, weight=3, ]
77 -> 43 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
77 -> 47 []
77 -> 44 []
77 -> 45 []
77 -> 46 []
78 -> 31 [arrowhead=empty, arrowsize=3, weight=3, ]
78 -> 54 [arrowhead=empty, arrowsize=3, weight=3, ]
78 -> 50 [arrowhead=empty, arrowsize=3, weight=3, ]
78 -> 56 [arrowhead=empty, arrowsize=3, weight=3, ]
78 -> 77 [arrowhead=empty, arrowsize=3, weight=3, ]
78 -> 49 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
78 -> 58 [arrowhead=empty, arrowsize=3, weight=3, ]
78 -> 53 [style=dashed, ]
78 -> 37 [style=dashed, ]
78 -> 46 [style=dashed, ]
78 -> 47 [style=dashed, ]
79 -> 31 [arrowhead=empty, arrowsize=3, weight=3, ]
79 -> 73 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
79 -> 72 [style=dashed, ]
80 -> 71 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
80 -> 75 [arrowhead=empty, arrowsize=3, weight=3, ]
81 -> 76 [arrowhead=empty, arrowsize=3, weight=3, ]
81 -> 72 [style=dashed, ]
81 -> 71 [style=dashed, ]
82 -> 48 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
83 -> 79 [arrowhead=empty, arrowsize=3, weight=3, ]
83 -> 50 [arrowhead=empty, arrowsize=3, weight=3, ]
83 -> 56 [arrowhead=empty, arrowsize=3, weight=3, ]
83 -> 82 [arrowhead=empty, arrowsize=3, weight=3, ]
83 -> 49 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
83 -> 80 []
83 -> 81 [style=dashed, ]
83 -> 78 [style=dashed, ]
83 -> 53 [style=dashed, ]
83 -> 37 [style=dashed, ]
}