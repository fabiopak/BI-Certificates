
digraph UmlClassDiagram {
rankdir=BT
arrowhead=open
bgcolor="white"
edge [color="black"]
node [shape=record, style=filled, color="black", fillcolor="gray95", fontcolor="black"]
subgraph  graph_0 {
label="contracts"
0 [label="{\<\<Abstract\>\>\nRHCertificateTokenStorage\ncontracts/RHCertificateToken.sol| Public:\l\ \ \ PRICE_MANAGER_ROLE: bytes32\l\ \ \ CERTIFICATE_ADMIN_ROLE: bytes32\l\ \ \ FIAT_ADMIN_ROLE: bytes32\l\ \ \ TRANSFER_AGENT_ROLE: bytes32\l\ \ \ certificatesFactoryAddress: address\l\ \ \ distributionVault: address\l\ \ \ distributionToken: address\l\ \ \ paymentToken: address\l\ \ \ _decimals: uint8\l\ \ \ riskDegree: uint8\l\ \ \ certificateType: uint8\l\ \ \ maxTotalCap: uint256\l\ \ \ docsCounter: uint256\l\ \ \ valStartDate: uint256\l\ \ \ valEndDate: uint256\l\ \ \ maturityDate: uint256\l\ \ \ maxArrayLength: uint256\l\ \ \ nominalValue: uint256\l\ \ \ tokenBidPrice: uint256\l\ \ \ tokenAskPrice: uint256\l\ \ \ paymentDecimals: uint256\l\ \ \ paused: bool\l\ \ \ mintAllowed: bool\l\ \ \ tokenExpired: bool\l\ \ \ isins: string[]\l\ \ \ strikePrices: uint256[]\l\ \ \ barrierPrices: uint256[]\l\ \ \ couponBarrierPrices: uint256[]\l\ \ \ autoCall: bool\l\ \ \ documents: mapping\(uint256=\>Doc\)\l\ \ \ investmentRequests: mapping\(address=\>InvestmentRequest\)\l\ \ \ disinvestmentRequests: mapping\(address=\>DisinvestmentRequest\)\l\ \ \ investmentLogs: mapping\(address=\>InvestmentLog\)\l\ \ \ transferAddresses: mapping\(address=\>bool\)\l\ \ \ avgBuyPrices: mapping\(address=\>uint256\)\l}"]
1 [label="{RHCertificateToken\ncontracts/RHCertificateToken.sol| Internal:\l\ \ \ \ _update(from: address, to: address, value: uint256) \<\<whenNotPaused\>\>\lExternal:\l\ \ \ \ \<\<payable\>\> null()\l\ \ \ \ initialize(_certificatesFactoryAddress: address, _tokenName: string, _tokenSymbol: string, _admin: address, _paymentToken: address, _paymentDecs: uint256, _riskDegree: uint8, _certificateType: uint8) \<\<initializer\>\>\l\ \ \ \ setTokenExpired() \<\<tokenNotExpired, onlyRole\>\>\l\ \ \ \ setMaxArrayLen(_newLen: uint256) \<\<onlyRole\>\>\l\ \ \ \ setMintAllowance(_newVal: bool) \<\<onlyRole\>\>\l\ \ \ \ pause() \<\<whenNotPaused, tokenNotExpired, onlyRole\>\>\l\ \ \ \ unpause() \<\<tokenNotExpired, onlyRole\>\>\l\ \ \ \ setTransferAddress(allowedAddress: address) \<\<onlyRole\>\>\l\ \ \ \ distributeDividends(_investorWallets: address[], totalDiv: uint256, dividendPerToken: bool) \<\<nonReentrant, onlyRole\>\>\l\ \ \ \ finalizeCertificate(_investorWallets: address[], finalPrice: uint256) \<\<onlyRole\>\>\l\ \ \ \ investorWithdraw(_amount: uint256)\l\ \ \ \ managedWithdraw(_investor: address, _amount: uint256)\l\ \ \ \ addNewDocument(uri: string, documentHash: bytes32) \<\<onlyRole\>\>\l\ \ \ \ emergencyTokenTransfer(_token: address, _to: address, _amount: uint256) \<\<nonReentrant, onlyRole\>\>\lPublic:\l\ \ \ \ \<\<modifier\>\> mintAllowance()\l\ \ \ \ \<\<modifier\>\> tokenNotExpired()\l\ \ \ \ \<\<modifier\>\> whenNotPaused()\l\ \ \ \ constructor()\l\ \ \ \ setCertificateParameters(_maxTotalCap: uint256, _nominalValue: uint256, _vault: address, _token: address, _valStartDate: uint256, _valEndDate: uint256, _maturityDate: uint256) \<\<onlyRole\>\>\l\ \ \ \ setCertificateOperativeParameters(_isins: string[], _strikePrices: uint256[], _barrierPrices: uint256[], _couponBarrierPrices: uint256[], _autoCall: bool) \<\<onlyRole\>\>\l\ \ \ \ decimals(): uint8\l\ \ \ \ transfer(_to: address, _value: uint256): bool \<\<whenNotPaused, tokenNotExpired, onlyRole\>\>\l\ \ \ \ transferFrom(_from: address, _to: address, _value: uint256): bool \<\<whenNotPaused, tokenNotExpired, onlyRole\>\>\l\ \ \ \ investorDeposit(_amount: uint256) \<\<nonReentrant, whenNotPaused, tokenNotExpired\>\>\l\ \ \ \ managedMint(_account: address, _amount: uint256, _depositProof: bytes32, _time: uint256) \<\<nonReentrant, whenNotPaused, mintAllowance, tokenNotExpired, onlyRole\>\>\l\ \ \ \ calcAvgPrice(prevInv: uint256, prevToken: uint256, newInv: uint256, newToken: uint256): uint256\l\ \ \ \ setPrice(_newBidPrice: uint256, _newAskPrice: uint256) \<\<onlyRole\>\>\l}"]
2 [label="{\<\<Abstract\>\>\nRHCertificatesFactoryStorage\ncontracts/RHCertificatesFactory.sol| Public:\l\ \ \ FACTORY_ADMIN_ROLE: bytes32\l\ \ \ certificatesCounter: uint256\l\ \ \ loansLogic: address\l\ \ \ isCertificateDeployed: mapping\(address=\>bool\)\l\ \ \ deployedCertificates: address[]\l}"]
3 [label="{RHCertificatesFactory\ncontracts/RHCertificatesFactory.sol| Public:\l\ \ \ loansBeacon: UpgradeableBeacon\l| Internal:\l\ \ \ \ _authorizeUpgrade(address) \<\<onlyOwner\>\>\lExternal:\l\ \ \ \ \<\<payable\>\> null()\l\ \ \ \ initialize(_vLogic: address, _admin: address) \<\<initializer, onlyProxy\>\>\l\ \ \ \ update(_vLogic: address) \<\<onlyOwner\>\>\l\ \ \ \ createCertificate(_tokenName: string, _tokenSymbol: string, _admin: address, _paymentToken: address, _decs: uint8, _riskDegree: uint8, _certificateType: uint8): address \<\<onlyRole\>\>\l\ \ \ \ emergencyTokenTransfer(_token: address, _to: address, _amount: uint256) \<\<onlyRole\>\>\l}"]
}
subgraph  graph_1 {
label="contracts/interfaces"
4 [label="{\<\<Interface\>\>\nIRHCertificateToken\ncontracts/interfaces/IRHCertificateToken.sol| Public:\l\ \ \ \ \<\<event\>\> DocHashAdded(num: uint256, docuri: string, dochash: bytes32)\l\ \ \ \ \<\<event\>\> TokenExpired(expirationBlock: uint256)\l\ \ \ \ \<\<event\>\> Paused(account: address)\l\ \ \ \ \<\<event\>\> Unpaused(account: address)\l\ \ \ \ \<\<event\>\> MintAllowance(status: bool, newStatusBlock: uint256)\l\ \ \ \ \<\<event\>\> CustomMintWithLogs(_account: address, newAmount: uint256, invLogLength: uint256, invLogs: InvestmentLog)\l\ \ \ \ \<\<event\>\> DistributeAmount(investor: address, grossAmount: uint256)\l\ \ \ \ \<\<event\>\> WDAmount(investor: address, grossAmount: uint256)\l}"]
5 [label="{\<\<Struct\>\>\nInvestmentRequest\ncontracts/interfaces/IRHCertificateToken.sol| investor: address\lamount: uint256\ltimestamp: uint256\l}"]
6 [label="{\<\<Struct\>\>\nDisinvestmentRequest\ncontracts/interfaces/IRHCertificateToken.sol| investor: address\lamount: uint256\ltimestamp: uint256\l}"]
7 [label="{\<\<Struct\>\>\nInvestmentLog\ncontracts/interfaces/IRHCertificateToken.sol| investor: address\lproofID: bytes32\ltimestamp: uint256\l}"]
8 [label="{\<\<Struct\>\>\nDoc\ncontracts/interfaces/IRHCertificateToken.sol| docURI: string\ldocHash: bytes32\llastModified: uint256\l}"]
9 [label="{\<\<Interface\>\>\nIRHCertificatesFactory\ncontracts/interfaces/IRHCertificatesFactory.sol| Public:\l\ \ \ \ \<\<event\>\> LoanCreated(account: address, loanFactory: address)\l}"]
10 [label="{\<\<Interface\>\>\nIRHErrors\ncontracts/interfaces/IRHErrors.sol}"]
}
subgraph  graph_2 {
label="contracts/mocks"
11 [label="{\<\<Interface\>\>\nIStableCoin\ncontracts/mocks/IStableCoin.sol| External:\l\ \ \ \  transferAddresses(addr: address): bool\l\ \ \ \  mintCoins(to: address, amount: uint256)\l\ \ \ \  forcedBurnCoins(account: address, amount: uint256)\l\ \ \ \  batchForcedBurnCoins(account: address[], amount: uint256[])\l}"]
12 [label="{LiquidityToken\ncontracts/mocks/LiquidityToken.sol| External:\l\ \ \ \ \<\<payable\>\> null()\lPublic:\l\ \ \ \ constructor(tokenName: string, tokenSymbol: string, initialOwner: address)\l\ \ \ \ mint(to: address, amount: uint256) \<\<onlyOwner\>\>\l}"]
13 [label="{StableCoin18Decs\ncontracts/mocks/StableCoin18Decs.sol| Public:\l\ \ \ ADMIN_ROLE: bytes32\l\ \ \ maxArrayLength: uint256\l\ \ \ transferAddresses: mapping\(address=\>bool\)\l| Internal:\l\ \ \ \ _update(from: address, to: address, value: uint256) \<\<whenNotPaused\>\>\lExternal:\l\ \ \ \ setMaxArrayLen(_newLen: uint256) \<\<onlyRole\>\>\l\ \ \ \ mintCoins(to: address, amount: uint256) \<\<onlyRole\>\>\l\ \ \ \ batchMintCoins(to: address[], amount: uint256[]) \<\<onlyRole\>\>\l\ \ \ \ setTransferAddress(allowedAddress: address) \<\<onlyRole\>\>\l\ \ \ \ forcedBurnCoins(account: address, amount: uint256) \<\<onlyRole\>\>\l\ \ \ \ batchForcedBurnCoins(account: address[], amount: uint256[]) \<\<onlyRole\>\>\l\ \ \ \ pause() \<\<onlyRole\>\>\l\ \ \ \ unpause() \<\<onlyRole\>\>\lPublic:\l\ \ \ \ constructor(_name: string, _sym: string)\l}"]
14 [label="{StableCoin6Decs\ncontracts/mocks/StableCoin6Decs.sol| Public:\l\ \ \ ADMIN_ROLE: bytes32\l\ \ \ maxArrayLength: uint256\l\ \ \ _decimals: uint8\l\ \ \ transferAddresses: mapping\(address=\>bool\)\l| Internal:\l\ \ \ \ _update(from: address, to: address, value: uint256) \<\<whenNotPaused\>\>\lExternal:\l\ \ \ \ setMaxArrayLen(_newLen: uint256) \<\<onlyRole\>\>\l\ \ \ \ mintCoins(to: address, amount: uint256) \<\<onlyRole\>\>\l\ \ \ \ batchMintCoins(to: address[], amount: uint256[]) \<\<onlyRole\>\>\l\ \ \ \ setTransferAddress(allowedAddress: address) \<\<onlyRole\>\>\l\ \ \ \ forcedBurnCoins(account: address, amount: uint256) \<\<onlyRole\>\>\l\ \ \ \ batchForcedBurnCoins(account: address[], amount: uint256[]) \<\<onlyRole\>\>\l\ \ \ \ pause() \<\<onlyRole\>\>\l\ \ \ \ unpause() \<\<onlyRole\>\>\lPublic:\l\ \ \ \ constructor(_name: string, _sym: string)\l\ \ \ \ decimals(): uint8\l}"]
}
0 -> 4 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
1 -> 0 [arrowhead=empty, arrowsize=3, weight=3, ]
1 -> 10 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
2 -> 9 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
3 -> 2 [arrowhead=empty, arrowsize=3, weight=3, ]
3 -> 10 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
3 -> 1 [style=dashed, ]
5 -> 4 [arrowhead=diamond, weight=2]
6 -> 4 [arrowhead=diamond, weight=2]
7 -> 4 [arrowhead=diamond, weight=2]
8 -> 4 [arrowhead=diamond, weight=2]
4 -> 7 [style=dashed, ]
13 -> 10 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
13 -> 11 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
14 -> 10 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
14 -> 11 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
}